#!/usr/bin/env ruby

require 'thor'
require 'nacha' # Assuming this loads the Nacha gem

module Nacha
  class CLI < Thor
    desc "parse FILE", "Parse an ACH file"
    def parse(file_path)
      begin
        unless File.exist?(file_path)
          puts "Error: File not found at #{file_path}"
          exit 1
        end

        ach_file = Nacha.parse(File.open(file_path)) # Use Nacha.parse

        # TODO: Determine a user-friendly way to output the parsed data.
        # For now, let's print the records.
        if ach_file && ach_file.is_a?(Array) && !ach_file.empty?
          puts "Successfully parsed #{file_path}:"
          ach_file.each_with_index do |record, index|
            puts "Record ##{index + 1}:"
            # Attempt to call a summary or to_s method if it exists,
            # otherwise inspect the record.
            if record.respond_to?(:to_s) && record.method(:to_s).owner != Kernel
              puts record.to_s
            else
              puts record.inspect
            end
            # If records have children, print them too (simplified)
            if record.respond_to?(:children) && record.children&.any?
              puts "  Children:"
              record.children.each_with_index do |child_record, child_index|
                puts "    Child ##{child_index + 1}:"
                if child_record.respond_to?(:to_s) && child_record.method(:to_s).owner != Kernel
                  puts "    #{child_record.to_s}"
                else
                  puts "    #{child_record.inspect}"
                end
              end
            end
          end
        elsif ach_file # It might be a single object if not an array
          puts "Successfully parsed #{file_path}:"
          if ach_file.respond_to?(:to_s) && ach_file.method(:to_s).owner != Kernel
            puts ach_file.to_s
          else
            puts ach_file.inspect
          end
        else
          puts "Could not parse the file or the file was empty."
        end
      rescue StandardError => e
        puts "An error occurred during parsing: #{e.message}"
        puts e.backtrace.join("\n")
        exit 1
      end
    end
  end
end

Nacha::CLI.start(ARGV)
