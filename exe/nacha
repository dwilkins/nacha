#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift(File.expand_path('../lib', __dir__))
require 'thor'
require 'json'
require 'nacha'
require 'nacha/formatter'
require 'openssl'

module Nacha
  class CLI < Thor
    TEMPLATES_DIR = File.join(Gem::Specification.find_by_name("nacha").gem_dir,
      "templates").freeze

    HTML_PREAMBLE_FILE = File.join(TEMPLATES_DIR, "html_preamble.html")
    HTML_POSTAMBLE_FILE = File.join(TEMPLATES_DIR, "html_postamble.html")

    desc "parse FILE", "Parse an ACH file"
    option :output_file, aliases: "-o"
    option :format, aliases: "-f", default: "html",
           desc: "Output format (html, json, md, markdown, or ach)",
           enum: %w[html json md markdown ach]
    option :md_flavor, default: "common_mark", enum: %w[common_mark github]
    def parse(file_path = nil)
      ach_file = Nacha::AchFile.new(file_path || $stdin)

      ach_file.parse

      if ach_file.records.is_a?(Array) && !ach_file.records.empty?
        if options[:output_file]
          File.open(options[:output_file], "w") do |f|
            write_output(ach_file, f)
          end
        else
          write_output(ach_file, $stdout)
        end
      else
        puts "Could not parse the file or the file was empty."
      end
    rescue StandardError => e
      puts "An error occurred during parsing: #{e.message}"
      exit 1
    end

    private

    def write_output(ach_file, io)
      case options[:format]
      when 'ach'
        io.puts ach_file.to_ach
      when 'html'
        io.puts ach_file.to_html
      when 'md', 'markdown'
        io.puts ach_file.to_markdown
      else
        io.puts ach_file.to_json
      end
    end
  end
end

Nacha::CLI.start(ARGV)
